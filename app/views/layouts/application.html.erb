<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "MyQuote" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes the compiled stylesheet served from public/stylesheets %>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <%= stylesheet_link_tag "/stylesheets/application", "data-turbo-track": "reload" %>
  </head>

  <body class="app-body">
    <header class="app-header">
      <div class="app-header__inner">
        <div class="app-brand">
          <%= link_to "MyQuote", root_path, class: "app-brand__link" %>
          <span class="app-brand__tagline">Curated wisdom, beautifully presented</span>
        </div>
        <nav class="app-nav" aria-label="Primary">
          <ul class="app-nav__list">
            <li class="app-nav__item"><%= link_to "Home", root_path, class: "app-nav__link" %></li>
            <li class="app-nav__item"><%= link_to "Discover", public_quotes_path, class: "app-nav__link" %></li>
            <li class="app-nav__item"><%= link_to "Categories", categories_path, class: "app-nav__link" %></li>
            <% if logged_in? %>
              <li class="app-nav__item"><%= link_to "My Quotes", quotes_path, class: "app-nav__link" %></li>
            <% end %>
            <% if admin? %>
              <li class="app-nav__item"><%= link_to "Admin", admin_users_path, class: "app-nav__link" %></li>
            <% end %>
          </ul>
        </nav>
        <div class="app-header__actions">
          <% if logged_in? %>
            <%= button_to "Logout", logout_path, method: :delete, class: "button button--ghost", form: { class: "app-header__logout-form", data: { turbo_confirm: "Are you sure you want to log out?" } } %>
          <% else %>
            <%= link_to "Login", login_path, class: "button button--ghost" %>
            <%= link_to "Sign Up", new_user_path, class: "button" %>
          <% end %>
        </div>
      </div>
    </header>

    <main class="app-main">
      <% flash.each do |key, message| %>
        <div class="flash flash--<%= key %>"><%= message %></div>
      <% end %>

      <%= yield %>
    </main>
    <footer class="app-footer">
      <p>&copy; <%= Time.zone.now.year %> MyQuote. Designed for reflection.</p>
    </footer>
    <div class="quote-modal" data-quote-modal hidden>
      <div class="quote-modal__backdrop" data-quote-modal-overlay></div>
      <div class="quote-modal__dialog" role="dialog" aria-modal="true" aria-labelledby="quote-modal-heading">
        <button type="button" class="quote-modal__close" data-quote-modal-close aria-label="Close quote details">
          <span aria-hidden="true">&times;</span>
        </button>
        <div class="quote-modal__content">
          <h2 id="quote-modal-heading" class="quote-modal__heading" data-quote-modal-title></h2>
          <div class="quote-modal__body" data-quote-modal-body></div>
        </div>
      </div>
    </div>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        var modal = document.querySelector("[data-quote-modal]");
        if (!modal) return;
        var overlay = modal.querySelector("[data-quote-modal-overlay]");
        var closeButton = modal.querySelector("[data-quote-modal-close]");
        var titleElement = modal.querySelector("[data-quote-modal-title]");
        var bodyElement = modal.querySelector("[data-quote-modal-body]");
        if (!overlay || !closeButton || !titleElement || !bodyElement) return;

        var lastFocusedElement = null;

        function closeModal() {
          modal.setAttribute("hidden", "hidden");
          modal.classList.remove("is-open");
          document.body.classList.remove("has-quote-modal");
          bodyElement.innerHTML = "";
          if (lastFocusedElement) {
            lastFocusedElement.focus({ preventScroll: true });
            lastFocusedElement = null;
          }
        }

        function openModal(card) {
          var content = card.querySelector("[data-quote-modal-content]");
          if (!content) return;
          lastFocusedElement = document.activeElement instanceof HTMLElement ? document.activeElement : null;
          var quoteTextElement = card.querySelector(".quote-card__text");
          var quoteText = quoteTextElement ? quoteTextElement.textContent.trim() : "Quote details";
          var sanitized = quoteText.replace(/^[“\"]|[”\"]$/g, "");
          titleElement.textContent = '“' + sanitized + '”';
          bodyElement.innerHTML = content.innerHTML;
          modal.removeAttribute("hidden");
          modal.scrollTop = 0;
          modal.classList.add("is-open");
          document.body.classList.add("has-quote-modal");
          closeButton.focus({ preventScroll: true });
        }

        document.querySelectorAll("[data-quote-modal-trigger]").forEach(function (card) {
          if (!card.getAttribute("tabindex")) {
            card.setAttribute("tabindex", "0");
          }
          card.addEventListener("click", function () {
            openModal(card);
          });
          card.addEventListener("keydown", function (event) {
            if (event.key === "Enter" || event.key === " " || event.key === "Spacebar" || event.key === "Space") {
              event.preventDefault();
              openModal(card);
            }
          });
        });

        overlay.addEventListener("click", closeModal);
        closeButton.addEventListener("click", closeModal);
        document.addEventListener("keydown", function (event) {
          if (event.key === "Escape" && modal.classList.contains("is-open")) {
            closeModal();
          }
        });

        document.querySelectorAll("[data-category-selector]").forEach(function (picker) {
          var select = picker.querySelector("select");
          var addButton = picker.querySelector("[data-category-selector-add]");
          var list = picker.querySelector("[data-category-selector-list]");
          var template = picker.querySelector("[data-category-selector-template]");
          var emptyState = picker.querySelector("[data-category-selector-empty]");

          if (!select || !addButton || !list || !template) {
            return;
          }

          function toggleEmptyState() {
            if (!emptyState) return;
            if (list.querySelector("[data-category-chip]")) {
              emptyState.setAttribute("hidden", "hidden");
            } else {
              emptyState.removeAttribute("hidden");
            }
          }

          function attachRemoveHandler(chip) {
            var removeButton = chip.querySelector("[data-category-remove]");
            if (!removeButton) return;
            removeButton.addEventListener("click", function (event) {
              event.preventDefault();
              chip.remove();
              toggleEmptyState();
            });
          }

          list.querySelectorAll("[data-category-chip]").forEach(attachRemoveHandler);
          toggleEmptyState();

          addButton.addEventListener("click", function (event) {
            event.preventDefault();
            var option = select.options[select.selectedIndex];
            if (!option || !option.value) {
              return;
            }

            if (list.querySelector('[data-category-id="' + option.value + '"]')) {
              return;
            }

            var fragment = template.content.cloneNode(true);
            var chip = fragment.querySelector("[data-category-chip]");
            var name = chip.querySelector("[data-category-name]");
            var input = chip.querySelector("[data-category-value]");
            var removeButton = chip.querySelector("[data-category-remove]");

            chip.dataset.categoryId = option.value;
            if (name) {
              name.textContent = option.textContent;
            }
            if (input) {
              input.value = option.value;
            }
            if (removeButton) {
              removeButton.setAttribute("aria-label", "Remove " + option.textContent);
            }

            list.appendChild(chip);
            attachRemoveHandler(chip);
            toggleEmptyState();
            select.selectedIndex = 0;
          });
        });
      });
    </script>
  </body>
</html>
